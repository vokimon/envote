#!/usr/bin/env python

import Simulador
from PyQt4 import QtGui, QtCore
from HondtTable import HondtTable
from PieChart import PieChart


import sys
import math
import glob

class Envoter(QtGui.QDialog) :
	def __init__(self, files) :
		QtGui.QDialog.__init__(self)
		if not files :
			files = sorted(
				glob.glob(
					"data/congresoBarcelona-????-*.csv"))
		print files
		self.cases = sorted([
			(name, Simulador.Resultats(file(name)))
			for name in files
			])
		self.currentCase = 0
		self.case = None

		colors = dict(
			abstencion="darkgrey",
			blancos="white",
			nulos="#F44",
			PSOE="red",
			CiU="blue",
			CIU="blue",
			PP="cyan",
			ERC="orange",
			ESQUERRA="orange",
			** {
			"PSC" : "red",
			"PSC-PSOE" : "red",
			"ICV-EUiA" : "green",
			"IC-V" : "green",
			"IC" : "green",
			"IC-EV" : "green",
			"IU" : "green",
			"PSUC" : "green",
			"PSUC-PCE" : "green",
			})

		layout = QtGui.QVBoxLayout()
		self.setLayout(layout)

		chartLayout = QtGui.QGridLayout()
		layout.addLayout(chartLayout)

		self.votesChart = PieChart()
		chartLayout.addWidget(self.votesChart,0,0)
		self.votesChart.setSectorColors(colors)

		self.proportionalChart = PieChart()
		chartLayout.addWidget(self.proportionalChart, 0,1)
		self.proportionalChart.setSectorColors(colors)

		self.sconsChart = PieChart()
		chartLayout.addWidget(self.sconsChart,0,2)
		self.sconsChart.setSectorColors(colors)

		self.hondtTable = HondtTable()
		layout.addWidget(self.hondtTable)

		self.title = QtGui.QComboBox()
		layout.addWidget(self.title)
		self.title.addItems([name for name, case in self.cases])
		self.title.currentIndexChanged.connect(self.titleChanged)

		buttonBox = QtGui.QDialogButtonBox()
		prevButton = buttonBox.addButton("&Previous", QtGui.QDialogButtonBox.ActionRole)
		nextButton = buttonBox.addButton("&Next", QtGui.QDialogButtonBox.ActionRole)
		layout.addWidget(buttonBox)

		nextButton.clicked.connect(self.nextDatabase)
		prevButton.clicked.connect(self.previousDatabase)
		self.updateDatabase()

		

	def previousDatabase(self) :
		self.currentCase -= 1
		self.currentCase %= len(self.cases)
	
		self.title.setCurrentIndex(self.currentCase)
		
	def nextDatabase(self) :
		self.currentCase += 1
		self.currentCase %= len(self.cases)

		self.title.setCurrentIndex(self.currentCase)

	def titleChanged(self, current) :
		self.currentCase = current

		self.updateDatabase()

	def updateDatabase(self) :
		name, case = self.cases[self.currentCase]
		print "Changint to", name
		print "Computing proportional"
		proportional = dict((
			(party, votes) 
			for party, votes in case.vots.iteritems()
			if party not in [
				'abstencion',
				'blancos',
				'nulos',
				]
			))
		print "Computing Seats"
		scons = case.scons
		if not sum(case.scons.values()) :
			s = Simulador.Simulador(case.representants, **case.vots)
			scons = s.repartiment(case.representants)
		print "Hondt Table"
		self.hondtTable.threshold = case.votsValids *.03
		self.hondtTable.nSeats = case.representants
		self.hondtTable.feedVotations(proportional)
		print "Updating Pies"
		self.votesChart.setSectorValues(**case.vots)
		self.proportionalChart.setSectorValues(**proportional)
		self.sconsChart.setSectorValues(**scons)
		print "end"



app = QtGui.QApplication(sys.argv)
window = Envoter(sys.argv[1:])
window.resize(800,600)
window.setWindowTitle("enVote: Simulador de votacions")
window.show()

sys.exit(app.exec_())






